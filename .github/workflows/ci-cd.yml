name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      publish_from_pr:
        description: 'Publish from PR (requires approval)'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [22.x, 24.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run linter
      run: pnpm run lint

    - name: Check types
      run: pnpm run check-types

    - name: Compile extension
      run: pnpm run compile

    - name: Run tests
      uses: coactions/setup-xvfb@v1
      with:
        run: pnpm test
      if: runner.os == 'Linux'
    
    - name: Run tests (Windows/macOS)
      run: pnpm test
      if: runner.os != 'Linux'

  security:
    name: Security Audit
    strategy:
      matrix:
        node-version: [22.x, 24.x]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level moderate

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build extension
      run: pnpm run package

    - name: Package extension
      run: pnpm exec vsce package --no-dependencies

    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: vsix-package
        path: '*.vsix'
        retention-days: 30

  version-and-tag:
    name: Version and Tag
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Handle version bump
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Extract version from tag
          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          TAG_VERSION="${TAG_VERSION#v}"
          echo "Tag version: $TAG_VERSION"
          echo "new_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          
          # Update package.json to match tag version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            pkg.version = '$TAG_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
        else
          # This is a main branch push - bump version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            BUMP_TYPE="patch"
          fi
          
          echo "Bumping version with type: $BUMP_TYPE"
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version
          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_VERSION=$(node -e "
              const version = '$CURRENT_VERSION'.split('.');
              version[0] = parseInt(version[0]) + 1;
              version[1] = 0;
              version[2] = 0;
              console.log(version.join('.'));
            ")
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION=$(node -e "
              const version = '$CURRENT_VERSION'.split('.');
              version[1] = parseInt(version[1]) + 1;
              version[2] = 0;
              console.log(version.join('.'));
            ")
          else
            NEW_VERSION=$(node -e "
              const version = '$CURRENT_VERSION'.split('.');
              version[2] = parseInt(version[2]) + 1;
              console.log(version.join('.'));
            ")
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Create tag for main branch pushes
          git add package.json
          git commit -m "Bump version to $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
        fi

  publish:
    name: Publish to VS Code Marketplace
    runs-on: ubuntu-latest
    needs: [build, version-and-tag]
    if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.publish_from_pr == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build extension
      run: pnpm run package

    - name: Publish to VS Code Marketplace
      run: pnpm run deploy
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}

    - name: Publish to Open VSX Registry
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}
      run: |
        pnpm add -g ovsx
        ovsx publish -p $OVSX_PAT
      continue-on-error: true

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download VSIX artifact
      uses: actions/download-artifact@v4
      with:
        name: vsix-package

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: 'v${{ steps.get_version.outputs.VERSION }}'
        name: Release v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: '*.vsix'
        generate_release_notes: true
        body: |
          ## What's New in v${{ steps.get_version.outputs.VERSION }}
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ### Installation
          
          #### From VS Code Marketplace
          1. Open VS Code
          2. Go to Extensions (Ctrl/Cmd + Shift + X)
          3. Search for "Remove Emojis"
          4. Click Install
          
          #### From VSIX file
          1. Download the `.vsix` file from the assets below
          2. Open VS Code
          3. Go to Extensions (Ctrl/Cmd + Shift + X)
          4. Click the "..." menu and select "Install from VSIX..."
          5. Select the downloaded file
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}